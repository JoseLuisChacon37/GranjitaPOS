 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;
import BDqueries.Conexion;
import clasesAuxiliares.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.awt.Dimension;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.util.LinkedList;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**    la orden
 *
 * @author CASA
 */
public class CorteDia extends javax.swing.JFrame {
     String  fechaCorte3;
     Integer pollo, fajita,papas,banderillas;
     Double polloTotal=0.00;
     Double fajitaTotal=0.00;
     Double papaTotal=0.00;
     Double   bandeTotal=0.00;
     String nom="";
     String   cve="";
     Short reng=0;
      XSSFWorkbook workbook = new XSSFWorkbook(); 
      XSSFSheet spreadsheet = workbook.createSheet("Corte Dia");
   //   spreadsheet.setColumnWidth(1, 8000);
      XSSFRow row = spreadsheet.createRow((short) 1);
      XSSFCell cell = (XSSFCell) row.createCell((short) 1);
     
 LinkedList listaProducto = new LinkedList();
  Boolean bandera;
     Double VentaTotal=0.00,Descuentos=0.00,Efectivo=0.00,Cambios=0.00,Tarjetas=0.00;

     public CorteDia ()
     {
        super("Corte Diario");

         initComponents();
        Fecha fecha = new Fecha();
        fechaCorte3 = fecha.getFecha3();
       
        txtFecha.setText(fechaCorte3);
        txtPollo.setText("0");
        txtFajita.setText("0");
        txtPapas.setText("0");
        txtBande.setText("0");
     }
    public CorteDia(  String nombre, String clave, Boolean band) {
        super("Corte Diario");

        nom=nombre;
        cve=clave;
        initComponents();
        Fecha fecha = new Fecha();
        fechaCorte3 = fecha.getFecha3();
        bandera=band;
        txtFecha.setText(fechaCorte3);
        txtPollo.setText("0");
        txtFajita.setText("0");
        txtPapas.setText("0");
        txtBande.setText("0");
        
    }
    
    public class ventaCombo {
        
        String numero;
        Integer cantidad;
        
        ventaCombo( String num, Integer cant){
            numero=num;
            cantidad=cant;
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPollo = new javax.swing.JTextField();
        txtFajita = new javax.swing.JTextField();
        txtPapas = new javax.swing.JTextField();
        txtBande = new javax.swing.JTextField();
        btnSacarCorte = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        PanelScroll = new javax.swing.JScrollPane();
        txtCorte = new javax.swing.JTextArea();
        btnSalir = new javax.swing.JButton();
        txtFecha = new javax.swing.JTextField();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 0));
        jLabel1.setText("Corte Diario");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Inventarios Iniciales");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("POLLO");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("FAJITA");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("PAPAS");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("BANDERILLAS");

        txtPollo.setText(" ");
        txtPollo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPolloActionPerformed(evt);
            }
        });

        txtFajita.setText(" ");
        txtFajita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFajitaActionPerformed(evt);
            }
        });

        txtPapas.setText(" ");
        txtPapas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPapasActionPerformed(evt);
            }
        });

        txtBande.setText(" ");
        txtBande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBandeActionPerformed(evt);
            }
        });

        btnSacarCorte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ok2.png"))); // NOI18N
        btnSacarCorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacarCorteActionPerformed(evt);
            }
        });

        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/borra2.jpg"))); // NOI18N
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        txtCorte.setBackground(new java.awt.Color(204, 255, 204));
        txtCorte.setColumns(20);
        txtCorte.setRows(5);
        txtCorte.setAutoscrolls(false);
        PanelScroll.setViewportView(txtCorte);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/puerta2.png"))); // NOI18N
        btnSalir.setText("jButton4");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPollo))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtFajita))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPapas))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(txtBande, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(60, 60, 60)
                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnSacarCorte, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(PanelScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(471, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPollo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFajita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPapas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtBande, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(btnSacarCorte, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(PanelScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPolloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPolloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPolloActionPerformed

    private void txtFajitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFajitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFajitaActionPerformed

    private void txtPapasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPapasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPapasActionPerformed

    private void txtBandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBandeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBandeActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        txtPollo.setText("0");
        txtCorte.setText("");
        txtFajita.setText("0");
        txtPapas.setText("0");
        txtBande.setText("0");       
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnSacarCorteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacarCorteActionPerformed
        // TODO add your handling code here
        String sSQL = "";
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();
        Integer encontrada = 0;
        fechaCorte3=txtFecha.getText();
        sSQL = "SELECT *  from orden  WHERE pagada ='NO' and fecha='"+ fechaCorte3+"'";
        try{
            Statement st = link.createStatement();
            ResultSet rs = st.executeQuery(sSQL);
            
            while(rs.next()){   // buscar si hay ordene sin pagar
                encontrada = encontrada +1;
            }   
            if(encontrada>0){
              JOptionPane.showMessageDialog(null,"No puede hacer el corte, hay "+encontrada+" ordenes sin pagar");
   
            }
            else {    // pdp esta pagado procede a hacer el corte
                revisaComanda();
                calculaProduccion();
                calculaVenta();  
                calculaCombos();
                calculaVentaProduccion();               
                calculaProductos();
       
         
            }
        }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }
        
    }//GEN-LAST:event_btnSacarCorteActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        if (bandera){
         Admin usuario = new Admin();
                 
                 usuario.nombreUsuario = nom;
                 usuario.claveUsuario=cve;
                 usuario.cambiarTitulo();
                 usuario.setVisible(true);                
                 dispose();
      } 
        else {  dispose();} 
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed

    //´procedimietmo para verificar que todas las comandas comincidan con las ordenes
    // si no la haya la genera
    public void revisaComanda()
    {
       String sSQL = "";
       String tick="", fech="", tot="";
         Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB(); 
        sSQL="SELECT numTicket,fecha,total FROM orden where  fecha='"+fechaCorte3+"'";
     try{
            Statement st = link.createStatement();
            ResultSet rs = st.executeQuery(sSQL);
            
       while(rs.next()){   //recorre todas las ordenes ordenes
            tick=rs.getString("numTicket");
            fech=rs.getString("fecha");
            tot=rs.getString("total");
            
            String  sSQL2=" SELECT * FROM comanda where numTicket='"+tick+"' and fecha ='"+fech+"'";
           try{
            Statement st2 = link.createStatement();   
            ResultSet rs2 = st2.executeQuery(sSQL2);
            boolean x = rs2.next();
            if (x==false){   // no hayo la comandao este es solo preovisional
              String   sSQL3 = "INSERT INTO comanda (numTicket,numMesa, numMesero, fecha, personas, total, horaInicial, horafinal) "
               + "VALUES (?,?,?,?,?,?,?,?)";
               try{
                  PreparedStatement pst1 = link.prepareStatement(sSQL3);
                  pst1.setString(1, tick);       
                  pst1.setString(2, "100");
                  pst1.setString(3, "200");
                  pst1.setString(4, fech); 
                  pst1.setString(5, "1");   
                  pst1.setString(6, tot);    
                  pst1.setString(7, "corte");   
                  pst1.setString(8, "corte");  
                 
                  int p = pst1.executeUpdate();
                  if(p>0){     // se inserto bien en la bd ahora actalizara la mesa
                   //actualziaOrden(); 
            }     else {JOptionPane.showMessageDialog(null,"Error al meter comanda en corte"); }
                 }catch (SQLException ex) {
                   JOptionPane.showMessageDialog(null,ex);
                   JOptionPane.showMessageDialog(null ,"NO sepudo crar comanda en Bel corte,avise al administrador");
                 }   
            }
           }
           catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
         }
         }   //while
         }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
         }
    }
    
    public void calculaVenta()
{
    String sSQL = "";
   
     //Double VentaTotal=0.00,Descuentos=0.00,Efectivo=0.00,Cambios=0.00,Tarjetas=0.00;
     Conexion mysql = new Conexion();
     Connection link = mysql.conectarDB();    
     Integer ticket1=0, ticket2=0;
      row.setHeight((short) 800);
         //Create a new font and alter it
             //Create a new font and alter it.
      XSSFFont font = workbook.createFont();     
      font.setFontHeightInPoints((short) 30);
      font.setFontName("IMPACT");
      font.setItalic(true);

      //Set font into style
      XSSFCellStyle style = workbook.createCellStyle();
      style.setFont(font);
     
      cell.setCellValue("Corte Dia :" +fechaCorte3);
      cell.setCellStyle(style);
    
     sSQL="SELECT sum(total), count(numTicket) FROM orden where  fecha='"+fechaCorte3+"'";
       try{
            Statement st = link.createStatement();
            ResultSet rs = st.executeQuery(sSQL);
            
       while(rs.next()){   // saca tdoo el total de ordenes
             VentaTotal=Double.parseDouble(rs.getString("sum(total)"));
             ticket2=Integer.parseInt(rs.getString("count(numTicket)"));
            }   
      sSQL="SELECT sum(descuento),sum(card),sum(cash), count(numTicket) FROM comanda where fecha='"+fechaCorte3+"'";
      try{
            ResultSet rs1 = st.executeQuery(sSQL);
            
       while(rs1.next()){   // buscar si hay ordene sin pagar
             Descuentos=Double.parseDouble(rs1.getString("sum(descuento)"));
             Efectivo=Double.parseDouble(rs1.getString("sum(cash)"));
             Tarjetas=Double.parseDouble(rs1.getString("sum(card)"));
             ticket1 = Integer.parseInt(rs1.getString("count(numTicket)"));
            } 
         }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
         }

      QuitaDecimales cadena = new QuitaDecimales(VentaTotal.toString());
      String resultado= cadena.dosDecimales(VentaTotal);  
      
      
       row = spreadsheet.createRow((short) 2); 
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Numero de Clientes");
      cell = (XSSFCell) row.createCell((short) 2);
      cell.setCellValue(ticket1);  
        cell = (XSSFCell) row.createCell((short) 3);
      cell.setCellValue(ticket2); 
      row = spreadsheet.createRow((short) 3); 
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("VENTA TOTAL :$");
      cell = (XSSFCell) row.createCell((short) 2);
      cell.setCellValue(resultado);   
      row = spreadsheet.createRow((short) 4);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Efectivo :$");
      cell = (XSSFCell) row.createCell((short) 2);
      Efectivo = VentaTotal - Tarjetas;
      resultado= cadena.dosDecimales(Efectivo);       
      cell.setCellValue(resultado);  
       row = spreadsheet.createRow((short) 5);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("tarjetas :$");
      cell = (XSSFCell) row.createCell((short) 2);
      resultado= cadena.dosDecimales(Tarjetas);       
      cell.setCellValue(resultado);       
       row = spreadsheet.createRow((short) 6);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Descuentos :$");
      cell = (XSSFCell) row.createCell((short) 2);
      resultado= cadena.dosDecimales(Descuentos);       
      cell.setCellValue(resultado);       
        row = spreadsheet.createRow((short) 7);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("GRAN TOTAL :$");
      cell = (XSSFCell) row.createCell((short) 2);
       resultado= cadena.dosDecimales(VentaTotal-Descuentos);                     
      cell.setCellValue(resultado);       

        }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }
   }
    
    public void calculaProduccion()
    {
         String sSQL="";
         String preciovta="0";
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();         
     
        pollo= Integer.parseInt(txtPollo.getText());
        fajita= Integer.parseInt(txtFajita.getText());
        papas= Integer.parseInt(txtPapas.getText());
        banderillas= Integer.parseInt(txtBande.getText());
        
      
        txtCorte.append(" \n\n REPORTE EN PROCESO!!!!! \n\n")   ;  
    
    }       
  public void calculaVentaProduccion()
      {
          String sSQL="", sSQL1="";
          String numplato="";
          String descripcion="";
          String precio="";
          String pesable="";
          String stockable="";
          String inventa="";
          Double totalProducto =0.00, GranTotal1=0.00;
          double totalDif =0.00;

          Integer totalProd2=0;
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();  
        reng++; reng++;
        row = spreadsheet.createRow((short) reng);
      row.setHeight((short) 400);
         //Create a new font and alter it
             //Create a new font and alter it.
      XSSFFont font = workbook.createFont();     
      font.setFontHeightInPoints((short) 18);
      font.setFontName("IMPACT2");
      font.setItalic(true);

      //Set font into style
      XSSFCellStyle style = workbook.createCellStyle();
      style.setFont(font);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Calculo de Produccion y Venta");
      cell.setCellStyle(style);   
      reng++; reng++;
      row = spreadsheet.createRow((short) reng);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Descripcion");
        cell = (XSSFCell) row.createCell((short) 2);
      cell.setCellValue("Precio");
      cell = (XSSFCell) row.createCell((short) 3);
      cell.setCellValue("Peso/Cantidad");
      cell = (XSSFCell) row.createCell((short) 4);
      cell.setCellValue("Total $");  
       cell = (XSSFCell) row.createCell((short) 5);
      cell.setCellValue("Inv FInal");  
        cell = (XSSFCell) row.createCell((short) 6);
      cell.setCellValue("Produccion");  
      cell = (XSSFCell) row.createCell((short) 7);
      cell.setCellValue("Diferencia");   
       cell = (XSSFCell) row.createCell((short) 8);
      cell.setCellValue("Saldo");      
       sSQL1="SELECT numPlato, descPlato, categoria, precio,stock, peso,inventario "
                + "from plato where numPlato= '1' or numPlato='2' or numPlato='3' or numPlato='4'";
        try{
            Statement st1 = link.createStatement();
            ResultSet rs1 = st1.executeQuery(sSQL1);  
 
           while(rs1.next()){   // recorrer topdos los prpductos
               numplato=rs1.getString("numPlato");
               descripcion=rs1.getString("descPlato");
               pesable=rs1.getString("peso");
               precio=rs1.getString("precio");
               inventa=rs1.getString("inventario");
               totalProducto=0.00;
               totalProd2=0;

                sSQL="SELECT detallecomanda.numTicket, detallecomanda.numPlato, detallecomanda.precio,"
               + "descPlato, cantidad, precio, kilos, dinero, stockable,"
               + "pesable FROM detallecomanda INNER JOIN comanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and detallecomanda.numPlato='"
                        + numplato + "'";
             try{  
                Statement st2 = link.createStatement();
    
               ResultSet rs2 = st2.executeQuery(sSQL);  
              
               while(rs2.next()){   // todos los detalle comanda de ese producto
                  Integer canti = Integer.parseInt(rs2.getString("cantidad"));
                  Double kilos = Double.parseDouble(rs2.getString("kilos"));
                   if(pesable.equals("SI")){
                    totalProducto=totalProducto+ (canti * kilos)/1000;
                    totalProd2= totalProd2 +  (int)(canti * kilos);
                   } else totalProducto=totalProducto+canti;
          
               }
               //buscar si tiene venta en lista de combos
                Integer vtaCombo=0;
                  for(int i=0; i<listaProducto.size(); i++){
                    ventaCombo prod2 = (ventaCombo) listaProducto.get(i); //taer el producto 
                      if(prod2.numero.equals(numplato)) {  // si esta se sacan sus datos
                         vtaCombo = prod2.cantidad;
                      }
                    }
                reng++;
               
                QuitaDecimales cadena = new QuitaDecimales(totalProducto.toString());
             //   String resultado= cadena.dosDecimales(totalProducto);
               String totalVta = "";
                
                row = spreadsheet.createRow((short) reng);
                cell = (XSSFCell) row.createCell((short) 1);
                cell.setCellValue(descripcion);
                cell = (XSSFCell) row.createCell((short) 2);
                cell.setCellValue(precio);
                Double combosVta=0.00;
                combosVta= (double)vtaCombo/1000;
                   totalVta = cadena.dosDecimales( ((totalProducto+combosVta)*Double.parseDouble(precio)));
               
                if (pesable.equals("SI")) {
                  cell = (XSSFCell) row.createCell((short) 3);
                  cell.setCellValue(totalProd2+vtaCombo); 

                } else
                {
                    cell = (XSSFCell) row.createCell((short) 3);
                  cell.setCellValue(totalProducto+combosVta);        
                }
                GranTotal1 = GranTotal1 + (totalProducto+combosVta)*Double.parseDouble(precio);
    
                cell = (XSSFCell) row.createCell((short) 4);
                cell.setCellValue(totalVta); 
   
                cell = (XSSFCell) row.createCell((short) 5);
                cell.setCellValue(inventa);    
     
                if (numplato.equals("1")){
                 cell = (XSSFCell) row.createCell((short) 6);
                cell.setCellValue(pollo);  // produccion
                cell = (XSSFCell) row.createCell((short) 7);
                // para sacar la difrenci
                cell.setCellValue(pollo-vtaCombo-totalProd2);  
                cell = (XSSFCell) row.createCell((short) 8);
                String resultado= cadena.dosDecimales(((pollo-vtaCombo-totalProd2)*Double.parseDouble(precio))/1000);
                cell.setCellValue(resultado);  
                totalDif=totalDif + ((pollo-vtaCombo-totalProd2)*Double.parseDouble(precio))/1000;
                }
                  if (numplato.equals("2")){
                 cell = (XSSFCell) row.createCell((short) 6);
                cell.setCellValue(fajita);
                cell = (XSSFCell) row.createCell((short) 7);
                cell.setCellValue(fajita-vtaCombo-totalProd2); 
                 cell = (XSSFCell) row.createCell((short) 8);
                 String resultado=cadena.dosDecimales(((fajita-vtaCombo-totalProd2)*Double.parseDouble(precio))/1000);
                cell.setCellValue(resultado);  
                totalDif=totalDif + ((fajita-vtaCombo-totalProd2)*Double.parseDouble(precio))/1000;               
                } 
                 if (numplato.equals("3")){
                 cell = (XSSFCell) row.createCell((short) 6);
                cell.setCellValue(papas);
                cell = (XSSFCell) row.createCell((short) 7);
                cell.setCellValue(papas-vtaCombo-totalProd2);  
                 cell = (XSSFCell) row.createCell((short) 8);
                 String resultado=cadena.dosDecimales(((papas-vtaCombo-totalProd2)*Double.parseDouble(precio)/1000));
                cell.setCellValue(resultado);   
                totalDif=totalDif + ((papas-vtaCombo-totalProd2)*Double.parseDouble(precio))/1000;               
                } 
                if (numplato.equals("4")){
                 cell = (XSSFCell) row.createCell((short) 6);
                cell.setCellValue(banderillas);
                cell = (XSSFCell) row.createCell((short) 7);
                cell.setCellValue(banderillas-vtaCombo-totalProducto);   
                cell = (XSSFCell) row.createCell((short) 8);
                String  resultado=cadena.dosDecimales((banderillas-vtaCombo-totalProducto)*Double.parseDouble(precio));
                cell.setCellValue(resultado);   
                totalDif=totalDif + (banderillas-vtaCombo-totalProducto)*Double.parseDouble(precio);                
                } 
             }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
             }  
             
        }   // while de productos
           reng++;
           Double Totales=0.00;
           row = spreadsheet.createRow((short) reng);
                cell = (XSSFCell) row.createCell((short) 3);
                cell.setCellValue("Total $");        
                cell = (XSSFCell) row.createCell((short) 4);
                cell.setCellValue(GranTotal1);    
           cell = (XSSFCell) row.createCell((short) 7);
                cell.setCellValue("NO vendido $");                 
                cell = (XSSFCell) row.createCell((short) 8);  
                QuitaDecimales cadena = new QuitaDecimales("123.33");
                String resultado=cadena.dosDecimales(totalDif);
                cell.setCellValue(resultado);        
              cell = (XSSFCell) row.createCell((short) 9);
                cell.setCellValue("Total Prod $");                 
               cell = (XSSFCell) row.createCell((short) 10);
               Totales = GranTotal1 + Double.parseDouble(resultado);
               resultado=cadena.dosDecimales(Totales);
               cell.setCellValue(resultado);
               cell.setCellStyle(style);
               reng++;
               row = spreadsheet.createRow((short) reng);
                cell = (XSSFCell) row.createCell((short) 3);
                cell.setCellValue("Excedente $");        
                cell = (XSSFCell) row.createCell((short) 4);
                cell.setCellValue((VentaTotal-Descuentos)-GranTotal1);                 
        } catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }  
      }   
    public void calculaProductos()
      {
          String sSQL="", sSQL1="";
          String numplato="";
          String descripcion="";
          String precio="";
          String pesable="";
          String stockable="";
          String inventa="";
          Double totalProducto =0.00, GranTotal=0.00;
          double totalDif =0.00;

          Integer totalProd2=0;
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();  
        reng++;
        row = spreadsheet.createRow((short) reng);
      row.setHeight((short) 400);
         //Create a new font and alter it
             //Create a new font and alter it.
      XSSFFont font = workbook.createFont();     
      font.setFontHeightInPoints((short) 18);
      font.setFontName("IMPACT2");
      font.setItalic(true);

      //Set font into style
      XSSFCellStyle style = workbook.createCellStyle();
      style.setFont(font);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Venta Por Producto");
      cell.setCellStyle(style);   
      reng++; reng++;
      row = spreadsheet.createRow((short) reng);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Descripcion");
        cell = (XSSFCell) row.createCell((short) 2);
      cell.setCellValue("Precio");
      cell = (XSSFCell) row.createCell((short) 3);
      cell.setCellValue("Peso/Cantidad");
      cell = (XSSFCell) row.createCell((short) 4);
      cell.setCellValue("Total $");
       cell = (XSSFCell) row.createCell((short) 5);
      cell.setCellValue("Vta en Combo");     
       cell = (XSSFCell) row.createCell((short) 6);
      cell.setCellValue("Inv FInal");  
         
       sSQL1="SELECT numPlato, descPlato, categoria, precio,stock, peso,inventario "
                + "from plato";
        try{
            Statement st1 = link.createStatement();
            ResultSet rs1 = st1.executeQuery(sSQL1);  
 
           while(rs1.next()){   // recorrer topdos los prpductos
               numplato=rs1.getString("numPlato");
               descripcion=rs1.getString("descPlato");
               pesable=rs1.getString("peso");
               precio=rs1.getString("precio");
               inventa=rs1.getString("inventario");
               totalProducto=0.00;
               totalProd2=0;

                sSQL="SELECT detallecomanda.numTicket, detallecomanda.numPlato, detallecomanda.precio,"
               + "descPlato, cantidad, precio, kilos, dinero, stockable,"
               + "pesable FROM detallecomanda INNER JOIN comanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and detallecomanda.numPlato='"
                        + numplato + "'";
             try{  
                Statement st2 = link.createStatement();
    
               ResultSet rs2 = st2.executeQuery(sSQL);  
              
               while(rs2.next()){   // todos los detalle comanda de ese producto
                  Integer canti = Integer.parseInt(rs2.getString("cantidad"));
                  Double kilos = Double.parseDouble(rs2.getString("kilos"));
                   if(pesable.equals("SI")){
                    totalProducto=totalProducto+ (canti * kilos)/1000;
                    totalProd2= totalProd2 +  (int)(canti * kilos);
                   } else totalProducto=totalProducto+canti;
          
               }
               //buscar si tiene venta en lista de combos
                Integer vtaCombo=0;
                  for(int i=0; i<listaProducto.size(); i++){
                    ventaCombo prod2 = (ventaCombo) listaProducto.get(i); //taer el producto 
                      if(prod2.numero.equals(numplato)) {  // si esta se sacan sus datos
                         vtaCombo = prod2.cantidad;
                      }
                    }
                reng++;
               
                QuitaDecimales cadena = new QuitaDecimales(totalProducto.toString());
             //   String resultado= cadena.dosDecimales(totalProducto);
                String totalVta = cadena.dosDecimales( (totalProducto*Double.parseDouble(precio)));
                
                GranTotal = GranTotal + totalProducto*Double.parseDouble(precio);
                row = spreadsheet.createRow((short) reng);
                cell = (XSSFCell) row.createCell((short) 1);
                cell.setCellValue(descripcion);
                cell = (XSSFCell) row.createCell((short) 2);
                cell.setCellValue(precio);
                if (pesable.equals("SI")) {
                  cell = (XSSFCell) row.createCell((short) 3);
                  cell.setCellValue(totalProd2);
                } else
                {
                    cell = (XSSFCell) row.createCell((short) 3);
                  cell.setCellValue(totalProducto);                 
                }
                      
                cell = (XSSFCell) row.createCell((short) 4);
                cell.setCellValue(totalVta); 
                cell = (XSSFCell) row.createCell((short) 5);
                cell.setCellValue(vtaCombo.toString());
                cell = (XSSFCell) row.createCell((short) 6);
                cell.setCellValue(inventa);    
      
   
     
             }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
             }  
             
        }   // while de productos
           reng++;
           row = spreadsheet.createRow((short) reng);
                cell = (XSSFCell) row.createCell((short) 3);
                cell.setCellValue("Gran Total $");        
                cell = (XSSFCell) row.createCell((short) 4);
                cell.setCellValue(GranTotal);
            
         try {
      FileOutputStream out = new FileOutputStream(new File(fechaCorte3+"-corte.xlsx"));
      workbook.write(out);
      out.close();
      txtCorte.append(" \n\n REPORTE GENERADO CON EXITO!!!!! \n\n")   ; 
                try{
          Runtime.getRuntime().exec("cmd /c start "+fechaCorte3+"-corte.xlsx");
          }catch(IOException  e){
              e.printStackTrace();
          }

      } catch (IOException e) {              
              }     
        } catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }  
      }
    
    public void calculaCombos()
    {
       String sSQL="";
       Conexion mysql = new Conexion();
       Connection link = mysql.conectarDB();  
       Integer totalGanancia=0;
      sSQL="SELECT numPlato, descPlato, categoria, precio,stock, peso,inventario,margen "
                + "from plato where categoria='COMBOS'";
      
      row = spreadsheet.createRow((short) 9);
      row.setHeight((short) 400);
         //Create a new font and alter it
             //Create a new font and alter it.
      XSSFFont font = workbook.createFont();     
      font.setFontHeightInPoints((short) 18);
      font.setFontName("IMPACT2");
      font.setItalic(true);

      //Set font into style
      XSSFCellStyle style = workbook.createCellStyle();
      style.setFont(font);
      cell = (XSSFCell) row.createCell((short) 1);
      cell.setCellValue("Combos Vendidos");
      cell.setCellStyle(style); 
      reng++; 
            row = spreadsheet.createRow((short) 10);
      cell = (XSSFCell) row.createCell((short) 2);
      cell.setCellValue("Cant.");  
       cell = (XSSFCell) row.createCell((short) 3);
      cell.setCellValue("Pollo");     
      cell = (XSSFCell) row.createCell((short) 4);
      cell.setCellValue("Fajita");  
       cell = (XSSFCell) row.createCell((short) 5);
      cell.setCellValue("Papas");    
      cell = (XSSFCell) row.createCell((short) 6);
      cell.setCellValue("Arroz CH");  
       cell = (XSSFCell) row.createCell((short) 7);
      cell.setCellValue("Arroz G");    
       cell = (XSSFCell) row.createCell((short) 8);
      cell.setCellValue("Ref 400");  
       cell = (XSSFCell) row.createCell((short) 9);
      cell.setCellValue("Ref 1.5");    
       cell = (XSSFCell) row.createCell((short) 10);
      cell.setCellValue("Tort 1/4");  
       cell = (XSSFCell) row.createCell((short) 11);
      cell.setCellValue("Tort 1/2");         
      reng=11;
      
        try{
            Statement st1 = link.createStatement();
            ResultSet rs1 = st1.executeQuery(sSQL);    
       
         while(rs1.next()){   // recorrer todas lOS PRODUCTOS tipo combo
            reng++; 
            String descripcion=rs1.getString("descPlato");
            String numplato=rs1.getString("numPlato");
            String ganancia=rs1.getString("margen");

            row = spreadsheet.createRow((short) reng );
            cell = (XSSFCell) row.createCell((short) 1);
            cell.setCellValue(descripcion);
           // reng++; reng++;
              sSQL="SELECT sum(detallecomanda.cantidad) FROM detallecomanda INNER JOIN comanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and detallecomanda.numPlato='"
                        + numplato + "'";
              try{  
                Statement st2 = link.createStatement();
    
                ResultSet rs2 = st2.executeQuery(sSQL);  
                String totalCombos="0";
              while(rs2.next()){   // todos los detalle comanda de ese producto combo
                 totalCombos = rs2.getString("sum(detallecomanda.cantidad)");
              } // otro while
              if(totalCombos==null) totalCombos="0";
              totalGanancia = totalGanancia + (Integer.parseInt(ganancia) * Integer.parseInt(totalCombos));
           //  row = spreadsheet.createRow((short) reng);
            cell = (XSSFCell) row.createCell((short) 2);
            cell.setCellValue(Integer.parseInt(totalCombos));           
           // reng++;  
             sSQL="SELECT  numPlato, descPlato,cantidad from prodCombo where prodCombo.numCombo='"  + numplato + "' ORDER BY numPlato";
              
              try{  
    
               ResultSet rs3 = st2.executeQuery(sSQL);  
               String medida="";
               Integer posicion=0;
              while(rs3.next()){   // todos los productos delcombo
                  String descri=rs3.getString("descPlato");
                  String canti=rs3.getString("cantidad");
                  String plato = rs3.getString("numPlato");
                  Integer totalMedida = Integer.parseInt(canti)*Integer.parseInt(totalCombos);
                  switch(plato)
                  {
                     case "1":
                     posicion=3;
                     break;
                     case "2":
                     posicion=4;
                     break;   
                      case "3":
                     posicion=5;
                     break;
                     case "10":
                     posicion=6;
                     break;  
                      case "11":
                     posicion=7;
                     break;
                     case "12":
                     posicion=8;
                     break;  
                       case "14":
                     posicion=9;
                     break;   
                      case "16":
                     posicion=10;
                     break;  
                       case "17":
                     posicion=11;
                     break;                     
                  }
                  //  row = spreadsheet.createRow((short) reng);
                //  cell = (XSSFCell) row.createCell((short) 1);
                 // cell.setCellValue(descri);  
                 
                  cell = (XSSFCell) row.createCell( posicion);
                  cell.setCellValue(totalMedida);    
                //  reng++;
                  
                  ventaCombo producto = new ventaCombo(plato,totalMedida);
                  if(listaProducto.isEmpty()) {
                      listaProducto.add(producto);
                  } else {
                    Boolean agregado=false;
                    for(int i=0; i<listaProducto.size()-1; i++){
                      ventaCombo prod2 = (ventaCombo) listaProducto.get(i); //taer el producto 
                      if(prod2.numero.equals(producto.numero)) {  // SI YA ESTA SE ACUMULA
                         producto.cantidad = producto.cantidad + prod2.cantidad;
                         listaProducto.remove(i);
                         listaProducto.add(producto);
                         agregado=true;
                      }
                    }
                    if(!agregado){
                           listaProducto.add(producto);
                      
                    }
                  }
              } // del while
               } catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
              }
                

             } catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
              }  

         } // del while   
         reng++;
                   row = spreadsheet.createRow((short) reng );
            cell = (XSSFCell) row.createCell((short) 1);
            cell.setCellValue("Ganancia Combos");
              cell = (XSSFCell) row.createCell((short) 2);
            cell.setCellValue(totalGanancia);       
     //   for(int i=0; i<listaProducto.size();i++){
           //  ventaCombo prod2 = (ventaCombo) listaProducto.get(i); //taer el producto 
           //  System.out.println(prod2.numero.toString() + "  " +prod2.cantidad.toString() +"\n");
       // }
        }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CorteDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CorteDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CorteDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CorteDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CorteDia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane PanelScroll;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnSacarCorte;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField txtBande;
    private javax.swing.JTextArea txtCorte;
    private javax.swing.JTextField txtFajita;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtPapas;
    private javax.swing.JTextField txtPollo;
    // End of variables declaration//GEN-END:variables
}
