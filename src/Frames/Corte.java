/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;
import BDqueries.Conexion;
import clasesAuxiliares.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.awt.Dimension;
import java.sql.PreparedStatement;

/**    la orden
 *
 * @author CASA
 */
public class Corte extends javax.swing.JFrame {
     String  fechaCorte3;
     Integer pollo, fajita,papas,banderillas;
     Double polloTotal=0.00;
     Double fajitaTotal=0.00;
     Double papaTotal=0.00;
    Double   bandeTotal=0.00;
    String nom="";
     String   cve="";
     //Modelo para manejar las tablas
     DefaultTableModel modelo = new DefaultTableModel();
     
    /**
     * Creates new form Corte
     */
     public Corte ()
     {
                  super("Corte Diario");

         initComponents();
        Fecha fecha = new Fecha();
        fechaCorte3 = fecha.getFecha3();
       
        txtFecha.setText(fechaCorte3);
        txtPollo.setText("0");
        txtFajita.setText("0");
        txtPapas.setText("0");
        txtBande.setText("0");
     }
    public Corte(  String nombre, String clave) {
                 super("Corte Diario");

        nom=nombre;
        cve=clave;
        initComponents();
        Fecha fecha = new Fecha();
        fechaCorte3 = fecha.getFecha3();
       
        txtFecha.setText(fechaCorte3);
        txtPollo.setText("0");
        txtFajita.setText("0");
        txtPapas.setText("0");
        txtBande.setText("0");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPollo = new javax.swing.JTextField();
        txtFajita = new javax.swing.JTextField();
        txtPapas = new javax.swing.JTextField();
        txtBande = new javax.swing.JTextField();
        btnSacarCorte = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        PanelScroll = new javax.swing.JScrollPane();
        txtCorte = new javax.swing.JTextArea();
        btnSalir = new javax.swing.JButton();
        txtFecha = new javax.swing.JTextField();

        jButton3.setText("jButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 0));
        jLabel1.setText("Corte Diario");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Inventarios Iniciales");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("POLLO");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("FAJITA");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("PAPAS");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("BANDERILLAS");

        txtPollo.setText(" ");
        txtPollo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPolloActionPerformed(evt);
            }
        });

        txtFajita.setText(" ");
        txtFajita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFajitaActionPerformed(evt);
            }
        });

        txtPapas.setText(" ");
        txtPapas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPapasActionPerformed(evt);
            }
        });

        txtBande.setText(" ");
        txtBande.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBandeActionPerformed(evt);
            }
        });

        btnSacarCorte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ok2.png"))); // NOI18N
        btnSacarCorte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacarCorteActionPerformed(evt);
            }
        });

        btnBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/borra2.jpg"))); // NOI18N
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        txtCorte.setBackground(new java.awt.Color(204, 255, 204));
        txtCorte.setColumns(20);
        txtCorte.setRows(5);
        txtCorte.setAutoscrolls(false);
        PanelScroll.setViewportView(txtCorte);

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/puerta2.png"))); // NOI18N
        btnSalir.setText("jButton4");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPollo))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtFajita))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPapas))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(txtBande, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(60, 60, 60)
                        .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnSacarCorte, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(PanelScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 739, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(471, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtPollo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFajita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPapas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtBande, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(btnSacarCorte, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(PanelScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(147, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPolloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPolloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPolloActionPerformed

    private void txtFajitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFajitaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFajitaActionPerformed

    private void txtPapasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPapasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPapasActionPerformed

    private void txtBandeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBandeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBandeActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        txtPollo.setText("0");
        txtCorte.setText("");
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnSacarCorteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacarCorteActionPerformed
        // TODO add your handling code here
        String sSQL = "";
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();
        Integer encontrada = 0;
        fechaCorte3=txtFecha.getText();
        sSQL = "SELECT *  from orden  WHERE pagada ='NO' and fecha='"+ fechaCorte3+"'";
        try{
            Statement st = link.createStatement();
            ResultSet rs = st.executeQuery(sSQL);
            
            while(rs.next()){   // buscar si hay ordene sin pagar
                encontrada = encontrada +1;
            }   
            if(encontrada>0){
              JOptionPane.showMessageDialog(null,"No puede hacer el corte, hay "+encontrada+" ordenes sin pagar");
   
            }
            else {
                revisaComanda();
                calculaVenta();  
                calculaProduccion();
                calculaProductos();
                calculaCombos();
            }
        }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }
        
    }//GEN-LAST:event_btnSacarCorteActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
         Admin usuario = new Admin();
                 
                 usuario.nombreUsuario = nom;
                 usuario.claveUsuario=cve;
                 usuario.cambiarTitulo();
                 usuario.setVisible(true);                
                 dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed

    public void revisaComanda()
    {
       String sSQL = "";
       String tick="", fech="", tot="";
 Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB(); 
        sSQL="SELECT numTicket,fecha,total FROM orden where  fecha='"+fechaCorte3+"'";
     try{
            Statement st = link.createStatement();
            ResultSet rs = st.executeQuery(sSQL);
            
       while(rs.next()){   //recorre todas las ordenes ordenes
            tick=rs.getString("numTicket");
            fech=rs.getString("fecha");
            tot=rs.getString("total");
            
            String  sSQL2=" SELECT * FROM comanda where numTicket='"+tick+"' and fecha ='"+fech+"'";
           try{
            Statement st2 = link.createStatement();   
            ResultSet rs2 = st2.executeQuery(sSQL2);
            boolean x = rs2.next();
            if (x==false){   // no hayo la comandao este es solo preovisional
              String   sSQL3 = "INSERT INTO comanda (numTicket,numMesa, numMesero, fecha, personas, total, horaInicial, horafinal) "
               + "VALUES (?,?,?,?,?,?,?,?)";
               try{
                  PreparedStatement pst1 = link.prepareStatement(sSQL3);
                  pst1.setString(1, tick);       
                  pst1.setString(2, "100");
                  pst1.setString(3, "200");
                  pst1.setString(4, fech); 
                  pst1.setString(5, "1");   
                  pst1.setString(6, tot);    
                  pst1.setString(7, "corte");   
                  pst1.setString(8, "corte");  
                 
                  int p = pst1.executeUpdate();
                  if(p>0){     // se inserto bien en la bd ahora actalizara la mesa
                   //actualziaOrden(); 
            }     else {JOptionPane.showMessageDialog(null,"Error al meter comanda en corte"); }
                 }catch (SQLException ex) {
                   JOptionPane.showMessageDialog(null,ex);
                   JOptionPane.showMessageDialog(null ,"NO sepudo crar comanda en Bel corte,avise al administrador");
                 }   
            }
           }
           catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
         }
         }   //while
         }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
         }
    }
    
    public void calculaVenta()
{
    String sSQL = "";
    //Modelo para manejar las tablas
     DefaultTableModel modelo = new DefaultTableModel();
     String[] renglon = new String[2];
    Double VentaTotal=0.00,Descuentos=0.00,Efectivo=0.00,Cambios=0.00,Tarjetas=0.00;
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();    
     txtCorte.append("\nCORTE DEL DIA : "+fechaCorte3 );
     txtCorte.append("\n==============================================");
     txtCorte.append("\n\n");
     sSQL="SELECT sum(total) FROM orden where  fecha='"+fechaCorte3+"'";
       try{
            Statement st = link.createStatement();
            ResultSet rs = st.executeQuery(sSQL);
            
       while(rs.next()){   // saca tdoo el total de ordenes
             VentaTotal=Double.parseDouble(rs.getString("sum(total)"));
            }   
      sSQL="SELECT sum(descuento),sum(card),sum(cash) FROM comanda where fecha='"+fechaCorte3+"'";
      try{
            ResultSet rs1 = st.executeQuery(sSQL);
            
       while(rs1.next()){   // buscar si hay ordene sin pagar
             Descuentos=Double.parseDouble(rs1.getString("sum(descuento)"));
             Efectivo=Double.parseDouble(rs1.getString("sum(cash)"));
             Tarjetas=Double.parseDouble(rs1.getString("sum(card)"));
   
            } 
         }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
         }

      QuitaDecimales cadena = new QuitaDecimales(VentaTotal.toString());
      String resultado= cadena.dosDecimales(VentaTotal);       
       txtCorte.append("Venta Total:  $ "+resultado+"\n")   ;   
       renglon[0]="Venta Total:";
       renglon[1]=resultado;
       modelo.addRow(renglon);
      resultado= cadena.dosDecimales(Efectivo);       

       txtCorte.append("       Efectivo:     $ "+resultado+"\n")   ;  
       renglon[0]="Efectivo:";
       renglon[1]=resultado;
       modelo.addRow(renglon);

      resultado= cadena.dosDecimales(Tarjetas);     
       txtCorte.append("       Tarjetas:    $ "+resultado+"\n")   ;
        renglon[0]="Tarjeta:";
       renglon[1]=resultado;
       modelo.addRow(renglon);

       resultado= cadena.dosDecimales(Descuentos);                     
       txtCorte.append("       Descuentos :  $ "+resultado+"\n")   ; 
        renglon[0]="Descuentos:";
       renglon[1]=resultado;
       modelo.addRow(renglon);

       resultado= cadena.dosDecimales(VentaTotal-Descuentos);                     
      
       txtCorte.append("Gran Total (Venta Total - Descuentos):  $ "+resultado+"\n")   ;     
       renglon[0]="GRAN TOTAL:";
       renglon[1]=resultado;
       modelo.addRow(renglon);       
        }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }
   }
    public void calculaProduccion()
    {
         String sSQL="";
         String preciovta="0";
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();         
     
        pollo= Integer.parseInt(txtPollo.getText());
        fajita= Integer.parseInt(txtFajita.getText());
        papas= Integer.parseInt(txtPapas.getText());
        banderillas= Integer.parseInt(txtBande.getText());
        
        // clacular pollo
      sSQL="SELECT sum(cantidad*kilos), detallecomanda.precio FROM comanda INNER JOIN detallecomanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and numPlato='1' group by detallecomanda.numPlato";
 
          try{
            Statement st = link.createStatement();
            ResultSet rs = st.executeQuery(sSQL);
            
       while(rs.next()){   // buscar si hay ordene sin pagar
             polloTotal=Double.parseDouble(rs.getString("sum(cantidad*kilos)"));
             preciovta=rs.getString("detallecomanda.precio");
         }   
        Double totalPollo =(polloTotal * Double.parseDouble(preciovta))/1000;
        txtCorte.append(" \n\n  PRODUCCION \n\n")   ;  
        txtCorte.append("------------------------------------------------");
        txtCorte.append("\n\nVenta Pollo (Kgs) : " + polloTotal/1000 + " = $ "+totalPollo);
        totalPollo = (pollo * Double.parseDouble(preciovta))/1000;
        txtCorte.append("\nProduccion (Kgs)  : " + pollo/1000 + " = $ " + totalPollo );
        totalPollo=((pollo-polloTotal)*Double.parseDouble(preciovta))/1000;
        txtCorte.append("\nSobrante (Kgs)  : " + (pollo-polloTotal)/1000+ " = $ " + totalPollo );
        txtCorte.append("\n----------------------------------------------\n\n");

        // calcuilar fajita
  sSQL="SELECT sum(cantidad*kilos), detallecomanda.precio FROM comanda INNER JOIN detallecomanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and numPlato='2' group by detallecomanda.numPlato";
 
          try{
            Statement st1 = link.createStatement();
            ResultSet rs1 = st1.executeQuery(sSQL);
            
       while(rs1.next()){   // buscar si hay ordene sin pagar
             fajitaTotal=Double.parseDouble(rs1.getString("sum(cantidad*kilos)"));
             preciovta=rs1.getString("detallecomanda.precio");
         }   
        totalPollo =(fajitaTotal * Double.parseDouble(preciovta))/1000;
        txtCorte.append("Venta Fajita (Kgs) : " + fajitaTotal/1000 + " = $ "+totalPollo);
        totalPollo = (fajita * Double.parseDouble(preciovta))/1000;
        txtCorte.append("\nProduccion (Kgs)  : " + fajita/1000 + " = $ " + totalPollo );
        totalPollo=((fajita-fajitaTotal)*Double.parseDouble(preciovta))/1000;
        txtCorte.append("\nSobrante (Kgs)  : " + (fajita-fajitaTotal)/1000+ " = $ " + totalPollo );
        txtCorte.append("\n----------------------------------------------\n\n");

          }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }      
        
     // calcuilar papas
  sSQL="SELECT sum(cantidad*kilos), detallecomanda.precio FROM comanda INNER JOIN detallecomanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and numPlato='3' group by detallecomanda.numPlato";
 
          try{
            Statement st2 = link.createStatement();
            ResultSet rs2 = st2.executeQuery(sSQL);
            
       while(rs2.next()){   // buscar si hay ordene sin pagar
             papaTotal=Double.parseDouble(rs2.getString("sum(cantidad*kilos)"));
             preciovta=rs2.getString("detallecomanda.precio");
         }   
        totalPollo =(papaTotal * Double.parseDouble(preciovta))/1000;
        txtCorte.append("Venta Papas (Kgs) : " + papaTotal/1000 + " = $ "+totalPollo);
        totalPollo = (papas * Double.parseDouble(preciovta))/1000;
        txtCorte.append("\nProduccion (Kgs)  : " + papas/1000 + " = $ " + totalPollo );
        totalPollo=((papas-papaTotal)*Double.parseDouble(preciovta))/1000;
        txtCorte.append("\nSobrante (Kgs)  : " + (papas-papaTotal)/1000+ " = $ " + totalPollo );
        txtCorte.append("\n------------------------------------------------\n\n");

          }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }      
        
   // calcuilar banderillas
 sSQL="SELECT sum(cantidad), detallecomanda.precio FROM detallecomanda INNER JOIN comanda ON comanda.numTicket=detallecomanda.numTicket"
               + " where comanda.fecha ='" + fechaCorte3+"' and numPlato='4' group by detallecomanda.numPlato";
 
          try{
            Statement st3 = link.createStatement();
            ResultSet rs3 = st3.executeQuery(sSQL);
            
       while(rs3.next()){   // buscar si hay ordene sin pagar
             bandeTotal=Double.parseDouble(rs3.getString("sum(cantidad)"));
             preciovta=rs3.getString("detallecomanda.precio");
         }   
        totalPollo =(bandeTotal * Double.parseDouble(preciovta));
        txtCorte.append("Venta Banderillas(Pz) : " + bandeTotal + " = $ "+totalPollo);
        totalPollo = (banderillas * Double.parseDouble(preciovta));
        txtCorte.append("\nProduccion (Pz)  : " + banderillas + " = $ " + totalPollo );
        totalPollo=((banderillas-bandeTotal)*Double.parseDouble(preciovta));
        txtCorte.append("\nSobrante (Pz)  : " + (banderillas-bandeTotal)+ " = $ " + totalPollo );
        txtCorte.append("\n------------------------------------------------\n\n");

          }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }      
                 
          
          }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }
    }       
    
    public void calculaProductos()
      {
          String sSQL="", sSQL1="";
          String numplato="";
          String descripcion="";
          String precio="";
          String pesable="";
          String stockable="";
          String inventa="";
          Double totalProducto =0.00;
        Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();   
        txtCorte.append("\nVENTA POR PRODUCTOS \n");
       txtCorte.append("\n------------------------------------------------\n");
                 txtCorte.append("\nCodigo  Descripcion  Precio   Kilos/Cant   Total    Inventario\n");

        
        sSQL1="SELECT numPlato, descPlato, categoria, precio,stock, peso,inventario "
                + "from plato";
        try{
            Statement st1 = link.createStatement();
            ResultSet rs1 = st1.executeQuery(sSQL1);  
 
           while(rs1.next()){   // recorrer topdos los prpductos
               numplato=rs1.getString("numPlato");
               descripcion=rs1.getString("descPlato");
               pesable=rs1.getString("peso");
               precio=rs1.getString("precio");
               inventa=rs1.getString("inventario");
               totalProducto=0.00;
              

                sSQL="SELECT detallecomanda.numTicket, detallecomanda.numPlato, detallecomanda.precio,"
               + "descPlato, cantidad, precio, kilos, dinero, stockable,"
               + "pesable FROM detallecomanda INNER JOIN comanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and detallecomanda.numPlato='"
                        + numplato + "'";
             try{  
                Statement st2 = link.createStatement();
    
               ResultSet rs2 = st2.executeQuery(sSQL);  
              
               while(rs2.next()){   // todos los detalle comanda de ese producto
                  Integer canti = Integer.parseInt(rs2.getString("cantidad"));
                  Double kilos = Double.parseDouble(rs2.getString("kilos"));
                   if(pesable.equals("SI")){
                    totalProducto=totalProducto+ (canti * kilos)/1000;
                 } else totalProducto=totalProducto+canti;
                 

               }
                              QuitaDecimales cadena = new QuitaDecimales(totalProducto.toString());
                String resultado= cadena.dosDecimales(totalProducto);
                String res2 = cadena.dosDecimales( (totalProducto*Double.parseDouble(precio)));
            txtCorte.append(numplato+ "       " + descripcion + "            " +precio + "            "+ resultado + "        "+ res2 +"     "+inventa+"\n" );
             }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }  
             
            }   // while de productos
            
        } catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }  
      }
    
    public void calculaCombos()
    {
         String sSQL="";
       Conexion mysql = new Conexion();
        Connection link = mysql.conectarDB();  
      sSQL="SELECT numPlato, descPlato, categoria, precio,stock, peso,inventario "
                + "from plato where categoria='COMBOS'";
        try{
            Statement st1 = link.createStatement();
            ResultSet rs1 = st1.executeQuery(sSQL);    
       
         while(rs1.next()){   // recorrer todas lOS PRODUCTOS tipo combo
            String descripcion=rs1.getString("descPlato");
            String numplato=rs1.getString("numPlato");

            txtCorte.append("\n\n"+descripcion+"\n" );

              //SQL="SELECT sum(detallecomanda.cantidad) FROM detallecomanda INNER JOIN comanda ON comanda.numticket=detallecomanda.numTicket"
                // + "where comanda.fecha ='" + fechaCorte3+"' and detallecomanda.numPlato='"+ numplato + "'";
              sSQL="SELECT sum(detallecomanda.cantidad) FROM detallecomanda INNER JOIN comanda ON comanda.numticket=detallecomanda.numTicket"
                 + " where comanda.fecha ='" + fechaCorte3+"' and detallecomanda.numPlato='"
                        + numplato + "'";
              try{  
                Statement st2 = link.createStatement();
    
               ResultSet rs2 = st2.executeQuery(sSQL);  
               String totalCombos="0";
              while(rs2.next()){   // todos los detalle comanda de ese producto combo
                 totalCombos = rs2.getString("sum(detallecomanda.cantidad)");
              } // otro while
              if(totalCombos==null) totalCombos="0";
              txtCorte.append("\nTotal de Combos :  "+totalCombos );
              
              sSQL="SELECT  descPlato,cantidad from prodCombo where prodCombo.numCombo='"  + numplato + "' ORDER BY numPlato";
              
              try{  
    
               ResultSet rs3 = st2.executeQuery(sSQL);  
               String medida="";
              while(rs3.next()){   // todos los productos delcombo
                  String descri=rs3.getString("descPlato");
                  String canti=rs3.getString("cantidad");
                  Integer totalMedida = Integer.parseInt(canti)*Integer.parseInt(totalCombos);
                  txtCorte.append("\n "+descri+":   "+totalMedida); 
               } 
               } catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
              }
                

             } catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
              }  

         } // del while   
            
        }catch (SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
        }

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Corte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Corte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Corte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Corte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Corte().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane PanelScroll;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnSacarCorte;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField txtBande;
    private javax.swing.JTextArea txtCorte;
    private javax.swing.JTextField txtFajita;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtPapas;
    private javax.swing.JTextField txtPollo;
    // End of variables declaration//GEN-END:variables
}
